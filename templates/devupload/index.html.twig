{% extends 'front/baseFront.html.twig' %}

{% block title %}UPLOAD A GAME{% endblock %}

{% block body %}
    <style>
        .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
        .example-wrapper code { background: #000000; padding: 2px 6px; }
    </style>

    <div class="example-wrapper">
        <h1> </h1>

        <ul>
            <h2 style="color: azure" align="center">YOU WANT TO CONTRIBUTE TO THE COMMUNITY WITH YOUR PERSONAL GAMES? DON'T THINK TWICE AND SHARE WITH THE TEAM YOUR AWESOME WORK!!</h2>
        </ul>


    </div>


    <a class="all" href="{{path('app_devupload_new')}}">
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        YES!
    </a>

    <style>


        .all{
            position: relative;
            display: inline-block;
            padding: 25px 900px;
            margin: 40px 0;
            color: #03e9f4;
            text-decoration: none;
            text-transform: uppercase;
            transition: 0.5s;
            letter-spacing: 4px;
            overflow: hidden;
            margin-right: 50px;

        }
        .all:hover{
            background: #ae020f;
            color: #050801;
            box-shadow: 0 0 5px #AE020F,
            0 0 25px #AE020F,
            0 0 50px #AE020F,
            0 0 200px #AE020F;
            -webkit-box-reflect:below 1px linear-gradient(transparent, #0005);
        }
        .all:nth-child(1){
            filter: hue-rotate(270deg);
        }
        .all:nth-child(2){
            filter: hue-rotate(110deg);
        }
        .all span{
            position: absolute;
            display: block;
        }
        .all span:nth-child(1){
            top: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background: linear-gradient(90deg,transparent, #d2efef);
            animation: animate1 1s linear infinite;
        }
        @keyframes animate1{
            0%{
                left: -100%;
            }
            50%,100%{
                left: 100%;
            }
        }
        .all span:nth-child(2){
            top: -100%;
            right: 0;
            width: 2px;
            height: 100%;
            background: linear-gradient(180deg,transparent, #afc7c8);
            animation: animate2 1s linear infinite;
            animation-delay: 0.25s;
        }
        @keyframes animate2{
            0%{
                top: -100%;
            }
            50%,100%{
                top: 100%;
            }
        }
        .all span:nth-child(3){
            bottom: 0;
            right: 0;
            width: 100%;
            height: 2px;
            background: linear-gradient(270deg,transparent, #000000);
            animation: animate3 1s linear infinite;
            animation-delay: 0.50s;
        }
        @keyframes animate3{
            0%{
                right: -100%;
            }
            50%,100%{
                right: 100%;
            }
        }


        .all span:nth-child(4){
            bottom: -100%;
            left: 0;
            width: 2px;
            height: 100%;
            background: linear-gradient(360deg,transparent, #000000);
            animation: animate4 1s linear infinite;
            animation-delay: 0.75s;
        }
        @keyframes animate4{
            0%{
                bottom: -100%;
            }
            50%,100%{
                bottom: 100%;
            }
        }


    </style>
    <div style="padding-left: 700px" >
        <canvas class="canvas js-canvas"></canvas>
    </div>
    <style>


    </style>
    <script>
        const ctx = document.querySelector('canvas').getContext('2d');
        const { canvas } = ctx;

        const TAU = Math.PI * 2;
        const W = 500;
        const H = W;
        const R = W >> 1;
        const R2 = R * 0.25;

        const NUM_LINES = 100;
        const LINE_ANGLE_STEP = TAU / NUM_LINES;
        const LINE_WIDTH_ANGLE = 0.02;

        let phase = 0;

        canvas.width = W;
        canvas.height = H;

        const drawCircle = (scale = 1, iteration) => {
            ctx.save();
            ctx.translate(W >> 1, H >> 1);
            ctx.scale(scale, scale);
            ctx.strokeStyle = 'rgba(0, 0, 0, 0.55)';

            for (let i = 0; i < NUM_LINES; i++) {
                const angle = LINE_ANGLE_STEP * i;
                const LINE_DEGREE_TO = LINE_ANGLE_STEP * 2 * (iteration * 0.2);
                const angleIteration = iteration * 0.05;

                ctx.beginPath();
                ctx.moveTo(Math.cos(angle - angleIteration) * R, Math.sin(angle) * R);
                ctx.lineTo(Math.cos(angle + angleIteration) * R2, Math.sin(angle + angleIteration) * R2);
                ctx.closePath();
                ctx.stroke();
                ctx.fill();
            }

            ctx.restore();
        };

        const clear = () => {
            ctx.clearRect(0, 0, W, H);
        };

        const loop = () => {
            clear();
            drawCircle(1, phase);
            drawCircle(1, -phase);

            // drawCircle(0.5, phase * 0.25);
            // drawCircle(0.5, -phase * 0.25);

            phase++;

            requestAnimationFrame(loop);
        };

        loop();

    </script>
{% endblock %}
